<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>兮xiyue曰</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xiiyue.github.io/"/>
  <updated>2020-02-24T06:13:26.988Z</updated>
  <id>http://xiiyue.github.io/</id>
  
  <author>
    <name>xiyue</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WorldEdit的使用</title>
    <link href="http://xiiyue.github.io/2020/02/21/WorldEdit%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://xiiyue.github.io/2020/02/21/WorldEdit的使用/</id>
    <published>2020-02-21T08:47:50.000Z</published>
    <updated>2020-02-24T06:13:26.988Z</updated>
    
    <content type="html"><![CDATA[<h2 id="选区选点"><a href="#选区选点" class="headerlink" title="选区选点"></a>选区选点</h2><h4 id="小木斧"><a href="#小木斧" class="headerlink" title="小木斧"></a>小木斧</h4><p>左键选择第一个点，右键选择第二个点。</p><h4 id="玩家"><a href="#玩家" class="headerlink" title="玩家"></a>玩家</h4><p>空中并没有方块供小木斧敲。</p><p><code>//pos1</code>    确定第一个点<br><code>//pos2</code>    确定第二个点<br>将玩家所在地的位置作为选择点，且是脚所在的方块，不是脚踩的方块。</p><p>另外，该指令后面可以加坐标精确指定，<code>//pos1 x,y,z</code>。</p><a id="more"></a><h4 id="远程"><a href="#远程" class="headerlink" title="远程"></a>远程</h4><p>人不想动，希望远程选区。<br>先看向要指定的点，要用指针指向方块。</p><p><code>//hpos1</code>    确定第一个点<br><code>//hpos2</code>    确定第二个点。</p><h2 id="选区调整"><a href="#选区调整" class="headerlink" title="选区调整"></a>选区调整</h2><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p>已经有了选区，但没包全</p><p><code>//expand &lt;格数&gt; [方向]</code>    正面扩展</p><p>‘&lt;&gt;’表示必需的参数；’[]’表示可选参数、<br>方向参数：E、S、W、N、U、D，不填则是玩家看向的方向。<br>当方向选定后，一个长方体在这个方向上有两个面，为了方便区分，我用正面和背面描述。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">        ----------------&gt;选定的方向</span><br><span class="line">       %%%%%%%%%%%%%%%%</span><br><span class="line">       %              %</span><br><span class="line">背面   %    选区截面    %   正面</span><br><span class="line">       %              %</span><br><span class="line">       %%%%%%%%%%%%%%%%</span><br></pre></td></tr></table></figure><p><code>//expand &lt;格数&gt; &lt;格数&gt; [方向]</code>    正面、背面扩展</p><p>第一个参数是正面扩展的格数，第一个参数是背面扩展的格数</p><p><code>//expand vert</code>    上下扩展到世界最高最低</p><h4 id="缩减"><a href="#缩减" class="headerlink" title="缩减"></a>缩减</h4><p>与expand相反，注意缩减的位置</p><p><code>//contract &lt;格数&gt; [方向]</code>    背面缩减<br><code>//expand &lt;格数&gt; &lt;格数&gt; [方向]</code>    背面、正面缩减</p><h4 id="全扩缩"><a href="#全扩缩" class="headerlink" title="全扩缩"></a>全扩缩</h4><p><code>//outset &lt;格数&gt;</code>    全方向扩展<br><code>//inset &lt;格数&gt;</code>    全方向缩减</p><p>另，有两个flag，放在指令后，参数前。<br><code>-h</code>    仅水平方向<br><code>-v</code>    仅垂直方向<br>如：<code>//outset -h 10</code>    全水平方向扩展10格</p><h4 id="移动选区"><a href="#移动选区" class="headerlink" title="移动选区"></a>移动选区</h4><p>整体将选择区域移动，不影响区域内的内容。<br><code>//shift &lt;格数&gt; [方向]</code></p><h2 id="选区编辑"><a href="#选区编辑" class="headerlink" title="选区编辑"></a>选区编辑</h2><h4 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h4><p><code>//undo [次数]</code>    不填次数则为1</p><h4 id="反撤销"><a href="#反撤销" class="headerlink" title="反撤销"></a>反撤销</h4><p><code>//redo [次数]</code>    不填次数则为1</p><h4 id="填充"><a href="#填充" class="headerlink" title="填充"></a>填充</h4><p><code>//set &lt;方块&gt;</code>    区域内全部填充指定方块</p><h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h4><p><code>//replace &lt;%方块&gt; [@方块]</code><br>如果没有第二个参数，将区域内所有方块替换为’%方块’，空气不变<br>有第二个参数，则用’@方块’替换区域内的’%方块’。</p><p>另，缩写指令<code>//rep或//re</code></p><h4 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h4><p><code>//move &lt;格数&gt; [方向]</code><br>移动选区内的方块，选区位置不变，且移动后，原位置变为空气。</p><p><code>//move &lt;格数&gt; &lt;方向&gt; [留存方块]</code><br>由于要填留存方块参数，前面的方向参数必须填，可以用<code>me</code>表示玩家面向方向。<br>移动后，原位置全部空间变为留存方块。</p><p>另，有flag。<br><code>-s</code>    选区和方块一起移动</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><h4 id="线性阵列"><a href="#线性阵列" class="headerlink" title="线性阵列"></a>线性阵列</h4><p><code>//stack &lt;次数&gt; [方向]</code><br>向指定方向，复制整个选区，选区位置不会变。</p><p>另，有flag。<br><code>-a</code>    忽略空气方块</p><h4 id="墙"><a href="#墙" class="headerlink" title="墙"></a>墙</h4><p><code>//walls &lt;方块&gt;</code><br>选区边缘生成一格宽的墙，上下不封。</p><h4 id="壳"><a href="#壳" class="headerlink" title="壳"></a>壳</h4><p><code>//faces &lt;方块&gt;</code><br>选区边缘生成一格宽的壳，上下左右前后六面封死。</p><h4 id="中心点"><a href="#中心点" class="headerlink" title="中心点"></a>中心点</h4><p><code>//center &lt;方块&gt;</code><br>选区的正中心生成方块</p><h4 id="掏空"><a href="#掏空" class="headerlink" title="掏空"></a>掏空</h4><p><code>//hollow &lt;方块&gt;</code><br>以选区内的所有结构为目标，掏空留壳。<br>比如选区内有一个实心的玻璃球和一个实心的石头正方体，掏空后留下一个玻璃球壳和一个石头正方体壳。</p><h4 id="加盖"><a href="#加盖" class="headerlink" title="加盖"></a>加盖</h4><p><code>//overlay &lt;方块&gt;</code><br>从正上方俯视选区，俯视图中的方块的上方加上指定方块。</p><h2 id="选区模式"><a href="#选区模式" class="headerlink" title="选区模式"></a>选区模式</h2><h4 id="清空区域选择"><a href="#清空区域选择" class="headerlink" title="清空区域选择"></a>清空区域选择</h4><p><code>//desel</code>    区域选错了，或者不想妨碍下次选区，将当前选点和选区删除，重新选择</p><h4 id="长方体选区"><a href="#长方体选区" class="headerlink" title="长方体选区"></a>长方体选区</h4><p><code>//sel cuboid</code><br>默认的模式。<br>左键，第一个点。<br>右键，第二个点。<br>结束。</p><h4 id="扩展式长方体选区"><a href="#扩展式长方体选区" class="headerlink" title="扩展式长方体选区"></a>扩展式长方体选区</h4><p><code>//sel extend</code><br>左键，第一个点A。<br>右键，第二个点B。<br>AB构成选区1<br>选区还有没包括的。<br>右键，第三个点C。<br>BC构成选区2。<br>总区域为选区1，2。<br>还可以继续加。</p><h4 id="球体选区"><a href="#球体选区" class="headerlink" title="球体选区"></a>球体选区</h4><p><code>//sel sphere</code><br>左键，球心。<br>右键，球面。<br>区域不满意？<br>右键，新球面。</p><h4 id="椭球体选区"><a href="#椭球体选区" class="headerlink" title="椭球体选区"></a>椭球体选区</h4><p><code>//sel ellipsoid</code><br>左键，中心。<br>右键，面。<br>右键，面。<br>继续右键以调整。</p><h4 id="多边形选区"><a href="#多边形选区" class="headerlink" title="多边形选区"></a>多边形选区</h4><p><code>//sel poly</code><br>左键，起始顶点。<br>右键，顶点。<br>右键，顶点。<br>……<br>可以不同高，选择不同高的顶点使选区变成柱形。</p><h4 id="圆（椭）柱体选区"><a href="#圆（椭）柱体选区" class="headerlink" title="圆（椭）柱体选区"></a>圆（椭）柱体选区</h4><p><code>//sel cyl</code><br>左键，中心。<br>右键，面。<br>右键，面。<br>……</p><h4 id="三维多面体选区"><a href="#三维多面体选区" class="headerlink" title="三维多面体选区"></a>三维多面体选区</h4><p><code>//sel convex</code><br>左键，起始顶点。<br>右键，顶点。<br>右键，顶点。<br>……</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;选区选点&quot;&gt;&lt;a href=&quot;#选区选点&quot; class=&quot;headerlink&quot; title=&quot;选区选点&quot;&gt;&lt;/a&gt;选区选点&lt;/h2&gt;&lt;h4 id=&quot;小木斧&quot;&gt;&lt;a href=&quot;#小木斧&quot; class=&quot;headerlink&quot; title=&quot;小木斧&quot;&gt;&lt;/a&gt;小木斧&lt;/h4&gt;&lt;p&gt;左键选择第一个点，右键选择第二个点。&lt;/p&gt;
&lt;h4 id=&quot;玩家&quot;&gt;&lt;a href=&quot;#玩家&quot; class=&quot;headerlink&quot; title=&quot;玩家&quot;&gt;&lt;/a&gt;玩家&lt;/h4&gt;&lt;p&gt;空中并没有方块供小木斧敲。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;//pos1&lt;/code&gt;    确定第一个点&lt;br&gt;&lt;code&gt;//pos2&lt;/code&gt;    确定第二个点&lt;br&gt;将玩家所在地的位置作为选择点，且是脚所在的方块，不是脚踩的方块。&lt;/p&gt;
&lt;p&gt;另外，该指令后面可以加坐标精确指定，&lt;code&gt;//pos1 x,y,z&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="软件教程" scheme="http://xiiyue.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Game" scheme="http://xiiyue.github.io/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>Markdown个人使用语法记录</title>
    <link href="http://xiiyue.github.io/2020/02/19/markdown%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8%E8%AF%AD%E6%B3%95%E8%AE%B0%E5%BD%95/"/>
    <id>http://xiiyue.github.io/2020/02/19/markdown个人使用语法记录/</id>
    <published>2020-02-19T11:50:17.000Z</published>
    <updated>2020-02-24T06:35:36.971Z</updated>
    
    <content type="html"><![CDATA[<p>避免反复上网查以前找过的。</p><a id="more"></a><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[toc]</span><br></pre></td></tr></table></figure><p>输入后在该位置自动生成目录<br>效果：</p><p>[toc]</p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://s2.ax1x.com/2020/02/24/38as1S.jpg" alt="38as1S.jpg"></p><h2 id="文字修饰"><a href="#文字修饰" class="headerlink" title="文字修饰"></a>文字修饰</h2><h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*斜体*一个星号</span><br><span class="line">_斜体_一个下划线</span><br></pre></td></tr></table></figure><p>效果：</p><p><em>斜体</em></p><p><em>斜体</em></p><h3 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**粗体**两个星号</span><br><span class="line">__粗体__两个下划线</span><br></pre></td></tr></table></figure><p>效果：</p><p><strong>粗体</strong></p><p><strong>粗体</strong></p><h3 id="斜粗体"><a href="#斜粗体" class="headerlink" title="斜粗体"></a>斜粗体</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">***斜粗体***三个星号</span><br><span class="line">___斜粗体___三个下划线</span><br></pre></td></tr></table></figure><p>效果：</p><p><strong><em>斜粗体</em></strong></p><p><strong><em>斜粗体</em></strong></p><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;u&gt;下划线&lt;/u&gt;</span><br></pre></td></tr></table></figure><p>效果：</p><p><u>下划线</u></p><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure><p>效果：</p><p><del>删除线</del></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">`代码`</span><br></pre></td></tr></table></figure><p>效果：<br><code>代码</code></p><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">​</span><br></pre></td></tr></table></figure><p>代码块<br>代码<br>​<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line">效果：</span><br></pre></td></tr></table></figure></p><p>代码块<br>代码<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 引用</span><br><span class="line"></span><br><span class="line">### 单层引用</span><br></pre></td></tr></table></figure></p><blockquote><p>引用内容<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">效果：</span><br><span class="line"></span><br><span class="line">&gt; 引用内容</span><br><span class="line"></span><br><span class="line">### 多层引用</span><br></pre></td></tr></table></figure></p><p>引用内容</p><blockquote><p>引用内容<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">效果：</span><br><span class="line"></span><br><span class="line">&gt; 引用内容</span><br><span class="line">&gt;</span><br><span class="line">&gt; &gt; 内层引用</span><br><span class="line"></span><br><span class="line">##　分割线</span><br></pre></td></tr></table></figure></p></blockquote></blockquote><h2 id><a href="#" class="headerlink" title="*"></a><em>*</em></h2><hr><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">效果：</span><br><span class="line">１</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">２</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">３</span><br><span class="line"></span><br><span class="line">___</span><br><span class="line"></span><br><span class="line">## 符号</span><br><span class="line"></span><br><span class="line">### 被markdown征用而无法直接显示出来</span><br><span class="line"></span><br><span class="line">利用转义符</span><br></pre></td></tr></table></figure><p>\\<br>`<br>*<br>_<br>\{\}<br>[]<br>()<br>#<br>+<br>-<br>.<br>!<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">效果：</span><br><span class="line"></span><br><span class="line">\\</span><br><span class="line">\`</span><br><span class="line">\*</span><br><span class="line">\_</span><br><span class="line">\&#123;\&#125;</span><br><span class="line">\[\]</span><br><span class="line">\(\)</span><br><span class="line">\#</span><br><span class="line">\+</span><br><span class="line">\-</span><br><span class="line">\.</span><br><span class="line">\!</span><br><span class="line"></span><br><span class="line">### 特殊符号</span><br></pre></td></tr></table></figure></p><p>&copy;   版权<br>&reg;    注册商标<br>&trade;  商标<br>&nbsp;   空格<br>&amp;    和号<br>&quot;   引号<br>&apos;   撇号<br>&lt;     小于号<br>&gt;     大于号<br>&ne;     不等号<br>&le;     小于等于<br>&ge;     大于等于<br>&cent;   分<br>&pound;  磅<br>&euro;   欧元<br>&yen;    元<br>&sect;   节<br>&times;  乘号<br>&divide; 除号<br>&plusmn; 正负号<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**分号也要输入</span><br><span class="line"></span><br><span class="line">效果：</span><br><span class="line"></span><br><span class="line">&amp;copy;</span><br><span class="line">&amp;reg;</span><br><span class="line">&amp;trade;</span><br><span class="line">&amp;nbsp; </span><br><span class="line">&amp;amp; </span><br><span class="line">&amp;quot; </span><br><span class="line">&amp;apos;</span><br><span class="line">&amp;lt; </span><br><span class="line">&amp;gt; </span><br><span class="line">&amp;ne;</span><br><span class="line">&amp;le; </span><br><span class="line">&amp;ge;</span><br><span class="line">&amp;cent;</span><br><span class="line">&amp;pound; </span><br><span class="line">&amp;euro;</span><br><span class="line">&amp;yen;</span><br><span class="line">&amp;sect; </span><br><span class="line">&amp;times; </span><br><span class="line">&amp;divide; </span><br><span class="line">&amp;plusmn; </span><br><span class="line"></span><br><span class="line">另提供HTML特殊字符编码对照表</span><br><span class="line"></span><br><span class="line">![38a6XQ.png](https://s2.ax1x.com/2020/02/24/38a6XQ.png)</span><br><span class="line"></span><br><span class="line">## 图片</span><br></pre></td></tr></table></figure></p><p><img src="图片的地址" alt="图片名，可以没有，可以随便"><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意：没有引号</span><br><span class="line"></span><br><span class="line">## 超链接</span><br><span class="line"></span><br><span class="line">### 样式1</span><br></pre></td></tr></table></figure></p><p><a href="https://www.baidu.com/" target="_blank" rel="noopener">百度</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">效果：</span><br><span class="line">[百度](https://www.baidu.com/)</span><br><span class="line"></span><br><span class="line">### 样式2</span><br></pre></td></tr></table></figure></p><p><a href="https://www.baidu.com/" target="_blank" rel="noopener">百度</a><br>然后在任何地方定义标签：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">效果：</span><br><span class="line">[百度][标签]</span><br><span class="line">可以把标签统一放在末尾，标签的名字也是自定义的</span><br><span class="line">[标签]: https://www.baidu.com/</span><br><span class="line"></span><br><span class="line">### 样式2（变种）</span><br></pre></td></tr></table></figure><p><a href="https://www.baidu.com/" target="_blank" rel="noopener">百度</a><br>不要标签，直接定义链接名字</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">效果：</span><br><span class="line">[百度][]</span><br><span class="line">可以把标签统一放在末尾，标签的名字也是自定义的</span><br><span class="line"></span><br><span class="line">[百度]: https://www.baidu.com/</span><br><span class="line"></span><br><span class="line">### 样式3</span><br><span class="line">直接插入链接</span><br></pre></td></tr></table></figure><p><a href="https://www.baidu.com/" target="_blank" rel="noopener">https://www.baidu.com/</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">效果：</span><br><span class="line">&lt;https://www.baidu.com/&gt;</span><br><span class="line"></span><br><span class="line">## 列表</span><br><span class="line"></span><br><span class="line">### 无序列表</span><br></pre></td></tr></table></figure></p><ul><li>无序列表1</li></ul><ul><li>无序列表2</li></ul><ul><li>无序列表3<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">三种符号的效果都是一样的</span><br><span class="line">效果：</span><br><span class="line">* 无序列表1</span><br><span class="line">+ 无序列表2</span><br><span class="line">- 无序列表3</span><br><span class="line"></span><br><span class="line">### 多层级无序列表</span><br></pre></td></tr></table></figure></li></ul><ul><li>无序列表1<br>TAB<em> 无序列表2<br>TABTAB</em> 无序列表3<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TAB是按TAB键。</span><br><span class="line"></span><br><span class="line">效果：</span><br><span class="line">* 无序列表1</span><br><span class="line">* 无序列表2</span><br><span class="line">* 无序列表3</span><br><span class="line"></span><br><span class="line">### 有序列表</span><br></pre></td></tr></table></figure></li></ul><ol><li>有序列表1</li><li>有序列表2</li><li><p>有序列表3</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">效果：</span><br><span class="line"></span><br><span class="line">1. 有序列表1</span><br><span class="line">2. 有序列表2</span><br><span class="line">3. 有序列表3</span><br><span class="line"></span><br><span class="line">### 多层级有序列表</span><br></pre></td></tr></table></figure></li><li><p>有序列表1</p></li><li>有序列表2<br>TAB1. 有序列表2-1<br>TAB2. 有序列表2-2</li><li>有序列表3<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">效果：</span><br><span class="line"></span><br><span class="line">1. 有序列表1</span><br><span class="line">2. 有序列表2</span><br><span class="line">1. 有序列表2-1</span><br><span class="line">2. 有序列表2-2</span><br><span class="line">3. 有序列表3</span><br><span class="line"></span><br><span class="line">### 任务列表</span><br></pre></td></tr></table></figure></li></ol><ul><li>[ ] 任务1</li><li>[x] 任务2<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- [ ] 任务1</span><br><span class="line">- [x] 任务2</span><br><span class="line"></span><br><span class="line">## 表格</span><br><span class="line"></span><br><span class="line">快捷键 Ctrl + t可以弹出行列选项</span><br><span class="line"></span><br><span class="line">或者自己手打</span><br></pre></td></tr></table></figure></li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">左对齐</th><th style="text-align:center">居中</th><th style="text-align:right">右对齐</th></tr></thead><tbody><tr><td style="text-align:left">第一行</td><td style="text-align:center">1</td><td style="text-align:right">a</td></tr><tr><td style="text-align:left">第二行</td><td style="text-align:center">2</td><td style="text-align:right">b</td></tr><tr><td style="text-align:left">第三行</td><td style="text-align:center">3</td><td style="text-align:right">c</td></tr></tbody></table></div><p>```<br>空格随意，加空格只是为在编辑时看起来是一列一列对齐的，比如第二行故意不对齐，但显示出来是正常的。<br>设置对齐方式时，多余的’-‘也是为了在编辑时有良好的可读性，实际上只需一个’-‘。<br>效果：<br>| 左对齐  | 居中  | 右对齐 |<br>| :——- |:——:| ——-:|<br>| 第一行  | 1    | a     |<br>| 第二行  | 2|b |<br>| 第三行  | 3    |    c  |</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;避免反复上网查以前找过的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="软件教程" scheme="http://xiiyue.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Markdown" scheme="http://xiiyue.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>基于TinyPNG所提供API的自动上传压缩可视化py脚本</title>
    <link href="http://xiiyue.github.io/2020/02/02/%E5%9F%BA%E4%BA%8ETinyPNG%E6%89%80%E6%8F%90%E4%BE%9BAPI%E7%9A%84%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%8E%8B%E7%BC%A9%E5%8F%AF%E8%A7%86%E5%8C%96py%E8%84%9A%E6%9C%AC/"/>
    <id>http://xiiyue.github.io/2020/02/02/基于TinyPNG所提供API的自动上传压缩可视化py脚本/</id>
    <published>2020-02-02T11:15:12.000Z</published>
    <updated>2020-02-24T06:13:16.120Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-引言"><a href="#0-引言" class="headerlink" title="0 引言"></a>0 引言</h2><p>用md写发布到网络上的文章需要利用图床，如果图片体积太大，不仅上传图床需要时间，网页加载也要时间，所以可以考虑减小图片体积。经过一番搜索，找到了TinyPNG在线压缩网站，只需图片拖进网站，然后等待，然后下载。<br>浏览器下载完后要切换到下载目录，剪切图片，跳回图片保存目录替换图片，如果下载时指定目录的话，下次写另一篇文章，又要换到另一个位置，烦死了！</p><a id="more"></a><h2 id="1-模型的建立"><a href="#1-模型的建立" class="headerlink" title="1 模型的建立"></a>1 模型的建立</h2><p>我会为每一篇文章指定一个图片保存目录，方便以后管理，而截图时直接就将图片保存在该目录下，所以我希望直接将图片拖进程序，然后它就直接变成了压缩成品，没有其他操作。</p><p>窗口接收文件；一个标签，显示文字“图片”，一个标签，文字显示为拖入图片的绝对地址；一个标签，显示目前状态；一个按钮，按下则开始工作。<br>理论上，不需要按钮，但是由本人控制何时开始感觉更有安全感。</p><p>为了方便查看各控件的坐标，在cad中做了初步的规划，由于界面实在太简单，也不准备再更改，就没有保存二维图，在此仅列出控件几何参数。</p><div class="table-container"><table><thead><tr><th style="text-align:center">标签</th><th style="text-align:center">定义名</th><th style="text-align:center">位置</th><th style="text-align:center">尺寸</th></tr></thead><tbody><tr><td style="text-align:center">窗体</td><td style="text-align:center">xiiyue</td><td style="text-align:center">无</td><td style="text-align:center">500,400</td></tr><tr><td style="text-align:center">静态标签</td><td style="text-align:center">label_s</td><td style="text-align:center">40,65</td><td style="text-align:center">60,30</td></tr><tr><td style="text-align:center">路径标签</td><td style="text-align:center">label_picfile</td><td style="text-align:center">130,50</td><td style="text-align:center">330,60</td></tr><tr><td style="text-align:center">状态标签</td><td style="text-align:center">label_state</td><td style="text-align:center">40,120</td><td style="text-align:center">420,160</td></tr><tr><td style="text-align:center">确认按钮</td><td style="text-align:center">butn</td><td style="text-align:center">200,305</td><td style="text-align:center">100,30</td></tr></tbody></table></div><h2 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2 代码实现"></a>2 代码实现</h2><h3 id="2-1-窗体"><a href="#2-1-窗体" class="headerlink" title="2.1 窗体"></a>2.1 窗体</h3><p>新建类，用于创建空白控件，自动成为窗体。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xiiyue</span><span class="params">(QWidget)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><p>其实不需要新建继承QWidget的类，我是边学边写，跟着写。新建类后想要运行它，在以下代码<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)  <span class="comment"># 创建应用</span></span><br><span class="line">    xiyue = xiiyue()              <span class="comment"># 实例化</span></span><br><span class="line">    xiyue.show()                  <span class="comment"># 显示窗口</span></span><br><span class="line">    sys.exit(app.exec_())         <span class="comment"># 持续运行</span></span><br></pre></td></tr></table></figure></p><p>这句if使得其他文件导入此文件不会运行，而执行此文件才会运行。我本来就打算在一个文件里完成所有代码，因此不需要考虑导入的问题，不过这种格式的确有逻辑清晰的优点，这样写也没毛病。<br>写到此时用到了QWidget，QApplication，sys，因此文件开头导入模块：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget,QApplication</span><br></pre></td></tr></table></figure></p><p>继续调整主窗体，改写init。<br>1，继承所有，毕竟不能影响QWidget的原本功能<br>2，设置窗体名<br>3，设置窗口大小<br>4，加载子控件</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    super(xiiyue, self).__init__()</span><br><span class="line">    <span class="comment"># 设置窗口名</span></span><br><span class="line">    self.setWindowTitle(<span class="string">"图片压缩"</span>)</span><br><span class="line">    <span class="comment"># 定义窗口大小</span></span><br><span class="line">    self.resize(<span class="number">500</span>, <span class="number">400</span>)</span><br><span class="line">    <span class="comment"># 布置控件</span></span><br><span class="line">    self.load()</span><br></pre></td></tr></table></figure><p>为了保证init的简洁明了，子控件的建立和外观设定都放在了<code>load()</code>函数里。</p><h3 id="2-2-子控件"><a href="#2-2-子控件" class="headerlink" title="2.2 子控件"></a>2.2 子控件</h3><p>定义<code>load()</code>函数<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><p>其中为各子控件的创建和设置代码</p><ul><li><p>静态标签部分</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 建标签</span></span><br><span class="line">self.label_s = QLabel(self)</span><br><span class="line"><span class="comment"># 标签位置和尺寸</span></span><br><span class="line">self.label_s.setGeometry(<span class="number">40</span>, <span class="number">65</span>, <span class="number">60</span>, <span class="number">30</span>)</span><br><span class="line"><span class="comment"># 标签格式，字体颜色红，大小15像素，加粗</span></span><br><span class="line">self.label_s.setStyleSheet(<span class="string">"color:red;font-size:15px;font-weight:bold;"</span>)</span><br><span class="line"><span class="comment"># 标签居中设置，水平垂直居中</span></span><br><span class="line">self.label_s.setAlignment(QtCore.Qt.AlignCenter)</span><br><span class="line"><span class="comment"># 标签文字</span></span><br><span class="line">self.label_s.setText(<span class="string">"图片"</span>)</span><br></pre></td></tr></table></figure></li><li><p>路径标签部分</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.label_picfile = QLabel(self)</span><br><span class="line">self.label_picfile.setGeometry(<span class="number">130</span>, <span class="number">50</span>, <span class="number">330</span>, <span class="number">60</span>)</span><br><span class="line"><span class="comment"># 标签格式，背景白，字体大小15像素</span></span><br><span class="line">self.label_picfile.setStyleSheet(<span class="string">"background-color:white;font-size:15px;"</span>)</span><br><span class="line"><span class="comment"># 标签居中设置，左对齐，垂直居中</span></span><br><span class="line">self.label_picfile.setAlignment(QtCore.Qt.AlignLeft |QtCore.Qt.AlignVCenter)</span><br><span class="line">self.label_picfile.setText(self.file_name)</span><br><span class="line"><span class="comment"># 标签设置自动换行</span></span><br><span class="line">self.label_picfile.setWordWrap(<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li></ul><p>这里有个变量<code>file_name</code>没有定义，它是存放文件名的变量，在init中加上<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.file_name = <span class="string">''</span></span><br></pre></td></tr></table></figure></p><ul><li><p>状态标签部分</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.label_state = QLabel(self)</span><br><span class="line">self.label_state.setGeometry(<span class="number">40</span>, <span class="number">120</span>, <span class="number">420</span>, <span class="number">160</span>)</span><br><span class="line">self.label_state.setAlignment(QtCore.Qt.AlignCenter)</span><br><span class="line">self.label_state.setStyleSheet(<span class="string">"font-size:50px;font-weight:bold;"</span>)</span><br><span class="line">self.label_state.setText(<span class="string">"就绪"</span>)</span><br></pre></td></tr></table></figure></li><li><p>确认按钮部分</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.butn = QPushButton(self)</span><br><span class="line">self.butn.setGeometry(<span class="number">200</span>,<span class="number">305</span>,<span class="number">100</span>,<span class="number">30</span>)</span><br><span class="line">self.butn.setText(<span class="string">"开始压缩"</span>)</span><br></pre></td></tr></table></figure></li></ul><p>以上用到了QLabel、QPushButton和QtCore同样要导入<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QLabel,QPushButton</span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore</span><br></pre></td></tr></table></figure></p><h3 id="2-3-拖入图片功能"><a href="#2-3-拖入图片功能" class="headerlink" title="2.3 拖入图片功能"></a>2.3 拖入图片功能</h3><p>现在程序的外形都有了，如图所示。</p><p><img src="https://s2.ax1x.com/2020/02/03/10hV6H.jpg" alt="10hV6H.jpg"></p><p>但是还没有相应的功能，本小节就实现运行图片拖入程序并获取位置信息。<br>在init中加入代码启用拖拽功能<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启用拖拽</span></span><br><span class="line">self.setAcceptDrops(<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></p><p>文件拖拽如控件时会自动调用dragEnterEvent函数，因此在类中重写此函数。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># evn参数接收拖入事件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dragEnterEvent</span><span class="params">(self, evn)</span>:</span></span><br><span class="line"><span class="comment"># 获取文件名</span></span><br><span class="line">    self.file_name=evn.mimeData().text()</span><br><span class="line">    <span class="comment"># 截取需要部分</span></span><br><span class="line">    self.file_name=self.file_name[<span class="number">8</span>:]</span><br><span class="line">    <span class="comment"># 设置路径标签文本</span></span><br><span class="line">    self.label_picfile.setText(self.file_name)</span><br></pre></td></tr></table></figure></p><p>路径标签中显示出路径说明一切都准备好了，可以点击按钮开始压缩。<br><code>evn.mimeData().text()</code>返回的路径开头8个字符是“file:///”，需要将其剪切。</p><h3 id="2-4-按钮功能"><a href="#2-4-按钮功能" class="headerlink" title="2.4 按钮功能"></a>2.4 按钮功能</h3><p>按下按钮就开始调用压缩函数，但是有一个问题，上传图片给tinypng然后返回结果需要一定的时间，而在这段时间内，程序会未响应的现象，心灰之余，该项目被我放弃了好长时间。现在闲着没事，搜索了一下，发现多线程可以解决这类问题。<br>按钮功能通过信号与槽机制实现，定义槽函数，即按钮按下后需要做的事<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">butn_job</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">if</span> self.file_name != <span class="string">''</span>:</span><br><span class="line"><span class="comment"># 设置状态标签文本，表明正在压缩</span></span><br><span class="line">        self.label_state.setText(<span class="string">"等"</span>)</span><br><span class="line">        <span class="comment"># 新建线程，指明该线程需执行的函数</span></span><br><span class="line">        self.thread_deal = threading.Thread(target=self.deal_pic)</span><br><span class="line">        <span class="comment"># 线程启动</span></span><br><span class="line">        self.thread_deal.start()</span><br><span class="line">    <span class="comment"># 没有拖入图片时不工作</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    self.label_state.setText(<span class="string">"拖入图片"</span>)</span><br></pre></td></tr></table></figure></p><p>线程需要threading模块<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br></pre></td></tr></table></figure></p><p>按钮的信号需要与槽连接，内置的信号为clicked函数，在init中连接<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.butn.clicked.connect(self.butn_job)</span><br></pre></td></tr></table></figure></p><h3 id="2-5-压缩"><a href="#2-5-压缩" class="headerlink" title="2.5 压缩"></a>2.5 压缩</h3><p>直接写<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deal_pic</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="comment"># 断开按钮信号与槽的连接，处理图片时按钮点击无反应</span></span><br><span class="line">    self.butn.blockSignals(<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 压缩图片</span></span><br><span class="line">    source = tinify.from_file(self.file_name)</span><br><span class="line">    <span class="comment"># 保存图片</span></span><br><span class="line">    source.to_file(self.file_name)</span><br><span class="line">    <span class="comment"># 记录本月上传次数</span></span><br><span class="line">    compressions_this_month =str(tinify.compression_count)</span><br><span class="line">    <span class="comment"># 次数没地方放，就显示在标题处吧</span></span><br><span class="line">    self.setWindowTitle(<span class="string">"图片压缩"</span> + <span class="string">"本月使用："</span> + compressions_this_month)</span><br><span class="line">    <span class="comment"># 设置状态标签</span></span><br><span class="line">    self.label_state.setText(<span class="string">"就绪"</span>)</span><br><span class="line">    <span class="comment"># 恢复按钮信号与槽的连接</span></span><br><span class="line">    self.butn.blockSignals(<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># 重置路径标签</span></span><br><span class="line">    self.file_name = <span class="string">''</span></span><br><span class="line">    self.label_picfile.setText(self.file_name)</span><br></pre></td></tr></table></figure></p><p>需要用到tinify模块<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tinify</span><br></pre></td></tr></table></figure></p><p>需要提供key<br>在程序开头就给它加上<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tinify.key = <span class="string">"xxxxxxxxxxxxxxxxxxx"</span></span><br></pre></td></tr></table></figure></p><p>至此所有工作都完成，完整代码在最后，接下来是试验。</p><h2 id="3-实机试验"><a href="#3-实机试验" class="headerlink" title="3 实机试验"></a>3 实机试验</h2><p>我在使用的时候发现，未响应问题确实解决了，但等待时间也太久了，我加了一个计时功能以便直观感受。<br>导入time模块<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tinify.key = <span class="string">"xxxxxxxxxxxxxxxxxxx"</span></span><br></pre></td></tr></table></figure></p><p>在图片压缩的两行代码上下加入时间记录函数，并将耗时显示在标题<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1 = time.time()</span><br><span class="line">source = tinify.from_file(self.file_name)</span><br><span class="line">source.to_file(self.file_name)</span><br><span class="line">t2 = time.time()</span><br><span class="line">t = t2 - t1</span><br><span class="line">compressions_this_month =str(tinify.compression_count)</span><br><span class="line">self.setWindowTitle(<span class="string">"图片压缩"</span> + <span class="string">"本月使用："</span> + compressions_this_month + <span class="string">"用时："</span> + str(t))</span><br></pre></td></tr></table></figure></p><p>随便个截图，277k，开始压缩了，看图</p><p><img src="https://s2.ax1x.com/2020/02/04/10q974.jpg" alt="10q974.jpg"></p><p>结束了，看图</p><p><img src="https://s2.ax1x.com/2020/02/04/10qA91.jpg" alt="10qA91.jpg"></p><p>37s，然后我下载了一个压缩图片的软件。</p><p>最后，此项目结束，有所收获，并尽量还原实际的思考过程。</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># by xiyue</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> tinify</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget,QLabel,QApplication,QPushButton</span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xiiyue</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(xiiyue, self).__init__()</span><br><span class="line">        <span class="comment">#定义变量</span></span><br><span class="line">        self.file_name = <span class="string">''</span></span><br><span class="line">        <span class="comment"># 窗口标题</span></span><br><span class="line">        self.setWindowTitle(<span class="string">"图片压缩"</span>)</span><br><span class="line">        <span class="comment"># 定义窗口大小</span></span><br><span class="line">        self.resize(<span class="number">500</span>, <span class="number">400</span>)</span><br><span class="line">        <span class="comment">#布置控件</span></span><br><span class="line">        self.load()</span><br><span class="line">        <span class="comment"># 启用Drops方法</span></span><br><span class="line">        self.setAcceptDrops(<span class="literal">True</span>)</span><br><span class="line">        <span class="comment">#signal and slot</span></span><br><span class="line">        self.butn.clicked.connect(self.butn_job)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#静态标签</span></span><br><span class="line">        self.label_s = QLabel(self)</span><br><span class="line">        self.label_s.setGeometry(<span class="number">40</span>, <span class="number">65</span>, <span class="number">60</span>, <span class="number">30</span>)</span><br><span class="line">        self.label_s.setStyleSheet(<span class="string">"color:red;font-size:15px;font-weight:bold;"</span>)</span><br><span class="line">        self.label_s.setAlignment(QtCore.Qt.AlignCenter)</span><br><span class="line">        self.label_s.setText(<span class="string">"图片"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#路径标签</span></span><br><span class="line">        self.label_picfile = QLabel(self)</span><br><span class="line">        self.label_picfile.setGeometry(<span class="number">130</span>, <span class="number">50</span>, <span class="number">330</span>, <span class="number">60</span>)</span><br><span class="line">        self.label_picfile.setStyleSheet(<span class="string">"background-color:white;font-size:15px;"</span>)</span><br><span class="line">        self.label_picfile.setAlignment(QtCore.Qt.AlignLeft |QtCore.Qt.AlignVCenter)</span><br><span class="line">        self.label_picfile.setText(self.file_name)</span><br><span class="line">        self.label_picfile.setWordWrap(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#状态标签</span></span><br><span class="line">        self.label_state = QLabel(self)</span><br><span class="line">        self.label_state.setGeometry(<span class="number">40</span>, <span class="number">120</span>, <span class="number">420</span>, <span class="number">160</span>)</span><br><span class="line">        self.label_state.setAlignment(QtCore.Qt.AlignCenter)</span><br><span class="line">        self.label_state.setStyleSheet(<span class="string">"font-size:50px;font-weight:bold;"</span>)</span><br><span class="line">        self.label_state.setText(<span class="string">"就绪"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#确认按钮</span></span><br><span class="line">        self.butn = QPushButton(self)</span><br><span class="line">        self.butn.setGeometry(<span class="number">200</span>,<span class="number">305</span>,<span class="number">100</span>,<span class="number">30</span>)</span><br><span class="line">        self.butn.setText(<span class="string">"开始压缩"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 鼠标拖入事件</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dragEnterEvent</span><span class="params">(self, evn)</span>:</span></span><br><span class="line">        self.file_name=evn.mimeData().text()</span><br><span class="line">        self.file_name=self.file_name[<span class="number">8</span>:]</span><br><span class="line">        self.label_picfile.setText(self.file_name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 按钮函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">butn_job</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.file_name != <span class="string">''</span>:</span><br><span class="line">            self.label_state.setText(<span class="string">"等"</span>)</span><br><span class="line">            self.thread_deal = threading.Thread(target=self.deal_pic)</span><br><span class="line">            self.thread_deal.start()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.label_state.setText(<span class="string">"拖入图片"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 压缩图片</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deal_pic</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.butn.blockSignals(<span class="literal">True</span>)</span><br><span class="line">        t1 = time.time()</span><br><span class="line">        source = tinify.from_file(self.file_name)</span><br><span class="line">        source.to_file(self.file_name)</span><br><span class="line">        t2 = time.time()</span><br><span class="line">        t = t2 - t1</span><br><span class="line">        compressions_this_month =str(tinify.compression_count)</span><br><span class="line">        self.setWindowTitle(<span class="string">"图片压缩"</span> + <span class="string">"本月使用："</span> + compressions_this_month + <span class="string">"用时："</span> + str(t))</span><br><span class="line">        self.label_state.setText(<span class="string">"就绪"</span>)</span><br><span class="line">        self.butn.blockSignals(<span class="literal">False</span>)</span><br><span class="line">        self.file_name = <span class="string">''</span></span><br><span class="line">        self.label_picfile.setText(self.file_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    tinify.key = <span class="string">"xxxxxxxxxxxxxxxxxxxxxxxxx"</span></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    xiyue = xiiyue()</span><br><span class="line">    xiyue.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0-引言&quot;&gt;&lt;a href=&quot;#0-引言&quot; class=&quot;headerlink&quot; title=&quot;0 引言&quot;&gt;&lt;/a&gt;0 引言&lt;/h2&gt;&lt;p&gt;用md写发布到网络上的文章需要利用图床，如果图片体积太大，不仅上传图床需要时间，网页加载也要时间，所以可以考虑减小图片体积。经过一番搜索，找到了TinyPNG在线压缩网站，只需图片拖进网站，然后等待，然后下载。&lt;br&gt;浏览器下载完后要切换到下载目录，剪切图片，跳回图片保存目录替换图片，如果下载时指定目录的话，下次写另一篇文章，又要换到另一个位置，烦死了！&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://xiiyue.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="python" scheme="http://xiiyue.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>AnsysWorkbench-01-热源扩散</title>
    <link href="http://xiiyue.github.io/2019/11/09/20191109_AnsysWorkbench_01_%E7%83%AD%E6%BA%90%E6%89%A9%E6%95%A3/"/>
    <id>http://xiiyue.github.io/2019/11/09/20191109_AnsysWorkbench_01_热源扩散/</id>
    <published>2019-11-09T11:47:25.000Z</published>
    <updated>2020-02-24T05:39:53.853Z</updated>
    
    <content type="html"><![CDATA[<p>1T的硬盘只有300G的空余了！明年蠢驴的2077一出，再复习一下GTA5和巫师，岂不是没地方学习了？无奈之下只好开始清理磁盘，先用spacesniffer软件看看文件的分布情况，然后我发现了40G的ansys分析结果。。。<br>其他的也不用看了，仿真文字化工程启动！<br>工程目的是记录仿真过程，以后忘记了也能迅速上手。该工程下的所有场景都是经过极端简化和重新假设的，毕竟原模型要处理的细节很多，与主题无关。<br><a id="more"></a></p><h2 id="场景介绍"><a href="#场景介绍" class="headerlink" title="场景介绍"></a>场景介绍</h2><p>有个东西在稳定发热，知道发热功率。它在向外界传热，我们要观察它周围物体的温度变化。</p><h2 id="仿真步骤实录"><a href="#仿真步骤实录" class="headerlink" title="仿真步骤实录"></a>仿真步骤实录</h2><h3 id="1-建立模型"><a href="#1-建立模型" class="headerlink" title="1 建立模型"></a>1 建立模型</h3><p>用solidwork，然后存为  .x_t 文件。<br>（Ansys18.2，文件为中文名没出现问题）</p><h3 id="2-导入WorkBench"><a href="#2-导入WorkBench" class="headerlink" title="2 导入WorkBench"></a>2 导入WorkBench</h3><p>先用Steady-State Thermal模块进行稳态热分析，从工具箱也就是Toolbox中找到，并拖动它到主界面中。<br><img src="https://s2.ax1x.com/2019/11/09/MnAaSH.png" alt="MnAaSH.png"></p><p>（右键，在新标签页查看应该可看清晰图）</p><p>上面的模块A、B、C是我已经完成的，现在为了说明添加过程，又拖了一个Steady-State Thermal模块。模块A不是必须的，它相当于在模块A中先处理了模型，然后传给了模块B中的B3：Geometry项。<br>如果一开始就添加的是Steady-State Thermal，那它就是模块A，A3就是Geometry项，对Geometry右键，将x_t 文件传进来。<br><img src="https://s2.ax1x.com/2019/11/09/MnV2ss.png" alt="MnV2ss.png"></p><p>选择Browse后就是在跳出的对话框里找你要导入的文件。导入后基本上就不用再处理了，不然为什么要用其他的三维建模软件呢？</p><h3 id="3-材料"><a href="#3-材料" class="headerlink" title="3 材料"></a>3 材料</h3><p>双击Steady-State Thermal模块的第二行Engineering Data项，右键选择edit也行。<br>现在进入了新的区域，在材料选择区中添加材料，先去自带的材料库中找，就是图中的A方案，或者在最后一栏输入自定义的材料名，自己建新材料，图中的B方案。<br><img src="https://s2.ax1x.com/2019/11/09/Mnn6kq.png" alt="Mnn6kq.png"></p><p>自定义材料需要添加材料的性质，从库中加的也可以添加更多材料性质。材料选择区的左边有Toolbox，里面包含了当前分析所需要的材料属性，如果分析只需要材料的密度，那Toolbox也只会显示密度属性。<br>软件一打开就自选了默认材料Structural Steel，它有什么我就选什么。在选择属性的过程中可能会出现某些性质没有显示出来，我猜是Toolbox窗口没刷新，我点击了右边材料选择区的空白处就好了。然后关掉Engineering Data窗口，回到第二步的主界面。<br><img src="https://s2.ax1x.com/2019/11/09/MnM0XD.png" alt="MnM0XD.png"></p><h3 id="4-稳态仿真设置"><a href="#4-稳态仿真设置" class="headerlink" title="4 稳态仿真设置"></a>4 稳态仿真设置</h3><p>双击Steady-State Thermal模块的第四行Model项。<br>第一步<strong>Geometry</strong>分支下是模型的所有实体，单击选中其中一个，可以在detail框中设置详细内容，现在把材料分别赋给每一个实体。<br><img src="https://s2.ax1x.com/2019/11/10/Mubgtx.png" alt="Mubgtx.png"></p><p>第二步<strong>Coordinate Systems</strong>分支，不动。</p><p>第三步<strong>Connections</strong>分支，用于设置实体之间的连接方式，默认固定连接（bonded）</p><p>第四步<strong>Mesh</strong>分支，用于画网格，不想手动处理，直接让机器自动生成网格，也就是不好看而已。</p><p>第五步<strong>Steady-State Thermal</strong>分支，稳态热分析的详细设置。右键Steady-State Thermal，选择insert，其中就是添加载荷、边界条件的选项。<br><img src="https://s2.ax1x.com/2019/11/10/MuOEm4.png" alt="MuOEm4.png"></p><ol><li>添加<strong>convection</strong>，设置对流热传递，比如暴露在空气中，则有空气对流换热。在detail框中，Geometry一栏选择要施加的位置；Film coefficient设置换热系数；Ambient temperature设置环境温度。<br><img src="https://s2.ax1x.com/2019/11/10/MujYWt.png" alt="MujYWt.png"></li></ol><ul><li>选择对象的时候需要考虑选择点、线、面、体，在模型界面空白处右键，然后选择Cursor Mode，其中就有鼠标选择模式。<br><img src="https://s2.ax1x.com/2019/11/10/MuxbqO.png" alt="MuxbqO.png"></li></ul><ol><li>添加<strong>Internal Heat Generation</strong>，实体以稳定速度产生热能，即每单位时间在单位体积产生的热能。在detail框中，Geometry一栏选择要施加的位置；Magnitude一栏选择发热量，单位是  瓦/体积，需要根据具体信息换算一下。</li></ol><ul><li>选择对象又会碰到一个问题，要选择的对象被其他实体挡住了，可以在第一步中选择实体按F9隐藏，或者右键选Hide Body。</li></ul><ol><li><strong>Solution</strong>分支，右键Solution，insert选择想查看的结果，这里加入的是Temperature。<br><img src="https://s2.ax1x.com/2019/11/10/MK93TS.png" alt="MK93TS.png"><br>数据是随便填的，结果吓人但不关键，关键是过程。<br>稳态分析只展示了最后结果，仿真时间是1s，可以在第五步Steady-State Thermal分支中的Analysis Settings中设置。<br><img src="https://s2.ax1x.com/2019/11/10/MK940K.png" alt="MK940K.png"></li></ol><h3 id="5-瞬态仿真设置（该过程有点问题）"><a href="#5-瞬态仿真设置（该过程有点问题）" class="headerlink" title="5 瞬态仿真设置（该过程有点问题）"></a>5 瞬态仿真设置（该过程有点问题）</h3><p>用瞬态热分析模块看温度随时间的变化。在添加模块的主界面找到Transient Thermal模块，将其拖到Steady-State Thermal模块的第六行Solution项上，继承它的计算结果。效果应该是本文第一幅图中所表示的，Steady-State Thermal模块中的Solution指向Transient Thermal模块中的Setup。<br><img src="https://s2.ax1x.com/2019/11/10/MKP4iD.png" alt="MKP4iD.png"></p><p>打开Transient Thermal模块的Model项，可以看到在第五步<strong>Steady-State Thermal</strong>分支下多了个Transient Thermal。</p><p>第六步<strong>Transient Thermal</strong>分支。</p><ol><li><p><strong>Analysis Settings</strong>设置分析时间，分析步长。step end time设置分析的总时间，auto time setpping打开后可以设置步长，即多少秒计算一次，最低多少秒一步，最大多少秒一步。我的40G就是这里产生的，时间长，步长短，计算次数就多，计算结果的数据就多。<br><img src="https://s2.ax1x.com/2019/11/10/MKA57t.png" alt="MKA57t.png"></p></li><li><p>按我的意思应该可以直接计算了，但软件提示必须加个条件。也就是右键Transient Thermal后，在insert中必须选一个，我就把<strong>convection</strong>在这又加了一次，我觉得有问题的地方就在这里。</p></li><li><p><strong>Solution</strong>分支与上面一样，Temperature的detail中可以选择任意时间的结果；Graph界面可以看曲线，温度还有下降趋势，应该把仿真时间调大再分析；播放按钮打开后能在模型界面看变化；Tabular Data界面可以把每一步的结果复制下来。<br><img src="https://s2.ax1x.com/2019/11/10/MKVbLj.png" alt="MKVbLj.png"><br><img src="https://s2.ax1x.com/2019/11/10/MKZJtP.png" alt="MKZJtP.png"></p></li></ol><p>完！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1T的硬盘只有300G的空余了！明年蠢驴的2077一出，再复习一下GTA5和巫师，岂不是没地方学习了？无奈之下只好开始清理磁盘，先用spacesniffer软件看看文件的分布情况，然后我发现了40G的ansys分析结果。。。&lt;br&gt;其他的也不用看了，仿真文字化工程启动！&lt;br&gt;工程目的是记录仿真过程，以后忘记了也能迅速上手。该工程下的所有场景都是经过极端简化和重新假设的，毕竟原模型要处理的细节很多，与主题无关。&lt;br&gt;
    
    </summary>
    
    
      <category term="软件教程" scheme="http://xiiyue.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="AnsysWorkbench" scheme="http://xiiyue.github.io/tags/AnsysWorkbench/"/>
    
  </entry>
  
  <entry>
    <title>Mathematica使用记录01-分式</title>
    <link href="http://xiiyue.github.io/2019/10/23/20191023_Mathematica%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95_01_%E5%88%86%E5%BC%8F/"/>
    <id>http://xiiyue.github.io/2019/10/23/20191023_Mathematica使用记录_01_分式/</id>
    <published>2019-10-23T08:02:08.000Z</published>
    <updated>2019-10-30T13:32:23.025Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;做作业的时候，碰到了分子还可以分母不忍直视的分式，为了做反z变换，必须将其化为几个可以查表的分式，虽然我可以手算，但是嘛。。。</p><a id="more"></a><h2 id="Apart-我裂开了"><a href="#Apart-我裂开了" class="headerlink" title="Apart-我裂开了"></a>Apart-我裂开了</h2><p>&emsp;&emsp;函数原型：<code>Apart[expr,var]</code><br>&emsp;&emsp;expr就是你要处理的表达式<br>&emsp;&emsp;var是可选的，可以不填，如果你的表达式中有多个变量，如x和y，填x则将y视为常数处理。</p><p>&emsp;&emsp;<font color="Blue" size="5">例</font>：  <font size="6">$\frac{1}{x^4-2 x^2+1}$</font> </p><p>&emsp;&emsp;在Mathematica中输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Apart[1/(1-2*x^2+x^4)]</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;shift 回车，输出结果如下图</p><p><img src="https://s2.ax1x.com/2019/10/30/K59qRx.png" alt="K59qRx.png"></p><p>&emsp;&emsp;如果想把分开的几个分式合并为一个呢？</p><h2 id="Together-通分求和"><a href="#Together-通分求和" class="headerlink" title="Together-通分求和"></a>Together-通分求和</h2><p>&emsp;&emsp;函数原型：<code>Together[expr]</code><br>&emsp;&emsp;expr就是你要处理的表达式<br>&emsp;&emsp;在Mathematica中输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Together[1/(4*(-1+x)^2)-1/(4*(-1+x))+1/(4*(1+x)^2)+1/(4*(1+x))]</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;shift 回车，输出结果如下图</p><p><img src="https://s2.ax1x.com/2019/10/30/K5CiWt.png" alt="K5CiWt.png"></p><p>&emsp;&emsp;可以看到，结果并不是完全展开式。</p><p>&emsp;&emsp;所以<font size="4">$\frac{1}{(x-1)^2 (x+1)^2}$</font>跟<font size="4">$\frac{1}{4 (x-1)^2}+\frac{1}{4 (x+1)}+\frac{1}{4 (x+1)^2}-\frac{1}{4 (x-1)}$</font>才是真正的一对？</p><p>&emsp;&emsp;如果想得到展开式呢？</p><h2 id="Expand-展开"><a href="#Expand-展开" class="headerlink" title="Expand-展开"></a>Expand-展开</h2><p>&emsp;&emsp;函数原型：<code>Expand[expr]</code><br>&emsp;&emsp;expr就是你要处理的表达式<br>&emsp;&emsp;在Mathematica中输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Expand[(4*(-1+x)^2)]</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;shift 回车，输出结果如下图</p><p><img src="https://s2.ax1x.com/2019/10/30/K5Ceeg.png" alt="K5Ceeg.png"></p><p>&emsp;&emsp;但是我想直接处理分式，应该选择Expand的扩展ExpandDenominator函数，即展开分母。如图</p><p><img src="https://s2.ax1x.com/2019/10/30/K5CdYR.png" alt="K5CdYR.png"></p><p>&emsp;&emsp;回过头处理刚才Together没搞定的多个分式。</p><p><img src="https://s2.ax1x.com/2019/10/30/K5CBSx.png" alt="K5CBSx.png"></p><p>&emsp;&emsp;第一次输入的是几个分式之和，它竟然是一个一个分开处理的。我只好先Together，再ExpandDenominator。</p><h2 id="Factor-因式分解-没有裂开"><a href="#Factor-因式分解-没有裂开" class="headerlink" title="Factor-因式分解(没有裂开)"></a>Factor-因式分解(没有裂开)</h2><p>&emsp;&emsp;函数原型：<code>Factor[expr]</code></p><p>&emsp;&emsp;在Mathematica中输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Factor[1/(4*x^2-8*x+4)]</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;输出结果如下图</p><p><img src="https://s2.ax1x.com/2019/10/30/K5CDl6.png" alt="K5CDl6.png"></p><p>&emsp;&emsp;另外，网上查Wolfram语法时发现用谷歌访问助手能“流畅”浏览，总比打不开好！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;做作业的时候，碰到了分子还可以分母不忍直视的分式，为了做反z变换，必须将其化为几个可以查表的分式，虽然我可以手算，但是嘛。。。&lt;/p&gt;
    
    </summary>
    
    
      <category term="研究学习" scheme="http://xiiyue.github.io/categories/%E7%A0%94%E7%A9%B6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Mathematic" scheme="http://xiiyue.github.io/tags/Mathematic/"/>
    
  </entry>
  
</feed>
